/*
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthenticationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call requestAccessTokenCall(String keyName, String xAblyVersion, String format, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/keys/{keyName}/requestToken"
            .replace("{" + "keyName" + "}", localVarApiClient.escapeString(keyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestAccessTokenValidateBeforeCall(String keyName, String xAblyVersion, String format, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling requestAccessToken(Async)");
        }

        return requestAccessTokenCall(keyName, xAblyVersion, format, body, _callback);

    }


    private ApiResponse<TokenDetails> requestAccessTokenWithHttpInfo(String keyName, String xAblyVersion, String format, Object body) throws ApiException {
        okhttp3.Call localVarCall = requestAccessTokenValidateBeforeCall(keyName, xAblyVersion, format, body, null);
        Type localVarReturnType = new TypeToken<TokenDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestAccessTokenAsync(String keyName, String xAblyVersion, String format, Object body, final ApiCallback<TokenDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestAccessTokenValidateBeforeCall(keyName, xAblyVersion, format, body, _callback);
        Type localVarReturnType = new TypeToken<TokenDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RequestAccessTokenRequestBuilder {
        private final String keyName;
        private String xAblyVersion;
        private String format;
        private Object body;

        private RequestAccessTokenRequestBuilder(String keyName) {
            this.keyName = keyName;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return RequestAccessTokenRequestBuilder
         */
        public RequestAccessTokenRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for requestAccessToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return requestAccessTokenCall(keyName, xAblyVersion, format, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute requestAccessToken request
         * @return TokenDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public TokenDetails execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<TokenDetails> localVarResp = requestAccessTokenWithHttpInfo(keyName, xAblyVersion, format, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute requestAccessToken request with HTTP info returned
         * @return ApiResponse&lt;TokenDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<TokenDetails> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return requestAccessTokenWithHttpInfo(keyName, xAblyVersion, format, body);
        }

        /**
         * Execute requestAccessToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TokenDetails> _callback) throws ApiException {
            Object body = buildBodyParams();
            return requestAccessTokenAsync(keyName, xAblyVersion, format, body, _callback);
        }
    }

    /**
     * Request an access token
     * This is the means by which clients obtain access tokens to use the service. You can see how to construct an Ably TokenRequest in the [Ably TokenRequest spec](https://www.ably.io/documentation/rest-api/token-request-spec) documentation, although we recommend you use an Ably SDK rather to create a TokenRequest, as the construction of a TokenRequest is complex. The resulting token response object contains the token properties as defined in Ably TokenRequest spec. Authentication is not required if using a Signed TokenRequest.
     * @param keyName The [key name](https://www.ably.io/documentation/rest-api/token-request-spec#api-key-format) comprises of the app ID and key ID of an API key. (required)
     * @return RequestAccessTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public RequestAccessTokenRequestBuilder requestAccessToken(String keyName) throws IllegalArgumentException {
        if (keyName == null) throw new IllegalArgumentException("\"keyName\" is required but got null");
            

        return new RequestAccessTokenRequestBuilder(keyName);
    }
}
