/*
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DeviceDetails;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.PublishPushNotificationToDevicesRequest;
import com.konfigthis.client.model.Push;
import com.konfigthis.client.model.Recipient;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PushApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PushApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PushApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deletePushDeviceDetailsCall(String xAblyVersion, String format, String channel, String deviceId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/channelSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceId", deviceId));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePushDeviceDetailsValidateBeforeCall(String xAblyVersion, String format, String channel, String deviceId, String clientId, final ApiCallback _callback) throws ApiException {
        return deletePushDeviceDetailsCall(xAblyVersion, format, channel, deviceId, clientId, _callback);

    }


    private ApiResponse<Void> deletePushDeviceDetailsWithHttpInfo(String xAblyVersion, String format, String channel, String deviceId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = deletePushDeviceDetailsValidateBeforeCall(xAblyVersion, format, channel, deviceId, clientId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePushDeviceDetailsAsync(String xAblyVersion, String format, String channel, String deviceId, String clientId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePushDeviceDetailsValidateBeforeCall(xAblyVersion, format, channel, deviceId, clientId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePushDeviceDetailsRequestBuilder {
        private String xAblyVersion;
        private String format;
        private String channel;
        private String deviceId;
        private String clientId;

        private DeletePushDeviceDetailsRequestBuilder() {
        }

        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return DeletePushDeviceDetailsRequestBuilder
         */
        public DeletePushDeviceDetailsRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return DeletePushDeviceDetailsRequestBuilder
         */
        public DeletePushDeviceDetailsRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set channel
         * @param channel Filter to restrict to subscriptions associated with that channel. (optional)
         * @return DeletePushDeviceDetailsRequestBuilder
         */
        public DeletePushDeviceDetailsRequestBuilder channel(String channel) {
            this.channel = channel;
            return this;
        }
        
        /**
         * Set deviceId
         * @param deviceId Must be set when clientId is empty, cannot be used with clientId. (optional)
         * @return DeletePushDeviceDetailsRequestBuilder
         */
        public DeletePushDeviceDetailsRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Set clientId
         * @param clientId Must be set when deviceId is empty, cannot be used with deviceId. (optional)
         * @return DeletePushDeviceDetailsRequestBuilder
         */
        public DeletePushDeviceDetailsRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Build call for deletePushDeviceDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePushDeviceDetailsCall(xAblyVersion, format, channel, deviceId, clientId, _callback);
        }


        /**
         * Execute deletePushDeviceDetails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePushDeviceDetailsWithHttpInfo(xAblyVersion, format, channel, deviceId, clientId);
        }

        /**
         * Execute deletePushDeviceDetails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePushDeviceDetailsWithHttpInfo(xAblyVersion, format, channel, deviceId, clientId);
        }

        /**
         * Execute deletePushDeviceDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePushDeviceDetailsAsync(xAblyVersion, format, channel, deviceId, clientId, _callback);
        }
    }

    /**
     * Delete a registered device&#39;s update token
     * Delete a device details object.
     * @return DeletePushDeviceDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public DeletePushDeviceDetailsRequestBuilder deletePushDeviceDetails() throws IllegalArgumentException {
        return new DeletePushDeviceDetailsRequestBuilder();
    }
    private okhttp3.Call getChannelsWithPushSubscribersCall(String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelsWithPushSubscribersValidateBeforeCall(String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        return getChannelsWithPushSubscribersCall(xAblyVersion, format, _callback);

    }


    private ApiResponse<List<String>> getChannelsWithPushSubscribersWithHttpInfo(String xAblyVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = getChannelsWithPushSubscribersValidateBeforeCall(xAblyVersion, format, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChannelsWithPushSubscribersAsync(String xAblyVersion, String format, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelsWithPushSubscribersValidateBeforeCall(xAblyVersion, format, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChannelsWithPushSubscribersRequestBuilder {
        private String xAblyVersion;
        private String format;

        private GetChannelsWithPushSubscribersRequestBuilder() {
        }

        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return GetChannelsWithPushSubscribersRequestBuilder
         */
        public GetChannelsWithPushSubscribersRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return GetChannelsWithPushSubscribersRequestBuilder
         */
        public GetChannelsWithPushSubscribersRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getChannelsWithPushSubscribers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChannelsWithPushSubscribersCall(xAblyVersion, format, _callback);
        }


        /**
         * Execute getChannelsWithPushSubscribers request
         * @return List&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public List<String> execute() throws ApiException {
            ApiResponse<List<String>> localVarResp = getChannelsWithPushSubscribersWithHttpInfo(xAblyVersion, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChannelsWithPushSubscribers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;String&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<List<String>> executeWithHttpInfo() throws ApiException {
            return getChannelsWithPushSubscribersWithHttpInfo(xAblyVersion, format);
        }

        /**
         * Execute getChannelsWithPushSubscribers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<String>> _callback) throws ApiException {
            return getChannelsWithPushSubscribersAsync(xAblyVersion, format, _callback);
        }
    }

    /**
     * List all channels with at least one subscribed device
     * Returns a paginated response of channel names.
     * @return GetChannelsWithPushSubscribersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public GetChannelsWithPushSubscribersRequestBuilder getChannelsWithPushSubscribers() throws IllegalArgumentException {
        return new GetChannelsWithPushSubscribersRequestBuilder();
    }
    private okhttp3.Call getPushDeviceDetailsCall(String deviceId, String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations/{device_id}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPushDeviceDetailsValidateBeforeCall(String deviceId, String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getPushDeviceDetails(Async)");
        }

        return getPushDeviceDetailsCall(deviceId, xAblyVersion, format, _callback);

    }


    private ApiResponse<DeviceDetails> getPushDeviceDetailsWithHttpInfo(String deviceId, String xAblyVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = getPushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, null);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPushDeviceDetailsAsync(String deviceId, String xAblyVersion, String format, final ApiCallback<DeviceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, _callback);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPushDeviceDetailsRequestBuilder {
        private final String deviceId;
        private String xAblyVersion;
        private String format;

        private GetPushDeviceDetailsRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return GetPushDeviceDetailsRequestBuilder
         */
        public GetPushDeviceDetailsRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return GetPushDeviceDetailsRequestBuilder
         */
        public GetPushDeviceDetailsRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getPushDeviceDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPushDeviceDetailsCall(deviceId, xAblyVersion, format, _callback);
        }


        /**
         * Execute getPushDeviceDetails request
         * @return DeviceDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public DeviceDetails execute() throws ApiException {
            ApiResponse<DeviceDetails> localVarResp = getPushDeviceDetailsWithHttpInfo(deviceId, xAblyVersion, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPushDeviceDetails request with HTTP info returned
         * @return ApiResponse&lt;DeviceDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<DeviceDetails> executeWithHttpInfo() throws ApiException {
            return getPushDeviceDetailsWithHttpInfo(deviceId, xAblyVersion, format);
        }

        /**
         * Execute getPushDeviceDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceDetails> _callback) throws ApiException {
            return getPushDeviceDetailsAsync(deviceId, xAblyVersion, format, _callback);
        }
    }

    /**
     * Get a device registration
     * Get the full details of a device.
     * @param deviceId Device&#39;s ID. (required)
     * @return GetPushDeviceDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public GetPushDeviceDetailsRequestBuilder getPushDeviceDetails(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new GetPushDeviceDetailsRequestBuilder(deviceId);
    }
    private okhttp3.Call getPushSubscriptionsOnChannelsCall(String xAblyVersion, String format, String channel, String deviceId, String clientId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/channelSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceId", deviceId));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPushSubscriptionsOnChannelsValidateBeforeCall(String xAblyVersion, String format, String channel, String deviceId, String clientId, Integer limit, final ApiCallback _callback) throws ApiException {
        return getPushSubscriptionsOnChannelsCall(xAblyVersion, format, channel, deviceId, clientId, limit, _callback);

    }


    private ApiResponse<DeviceDetails> getPushSubscriptionsOnChannelsWithHttpInfo(String xAblyVersion, String format, String channel, String deviceId, String clientId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPushSubscriptionsOnChannelsValidateBeforeCall(xAblyVersion, format, channel, deviceId, clientId, limit, null);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPushSubscriptionsOnChannelsAsync(String xAblyVersion, String format, String channel, String deviceId, String clientId, Integer limit, final ApiCallback<DeviceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPushSubscriptionsOnChannelsValidateBeforeCall(xAblyVersion, format, channel, deviceId, clientId, limit, _callback);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPushSubscriptionsOnChannelsRequestBuilder {
        private String xAblyVersion;
        private String format;
        private String channel;
        private String deviceId;
        private String clientId;
        private Integer limit;

        private GetPushSubscriptionsOnChannelsRequestBuilder() {
        }

        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return GetPushSubscriptionsOnChannelsRequestBuilder
         */
        public GetPushSubscriptionsOnChannelsRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return GetPushSubscriptionsOnChannelsRequestBuilder
         */
        public GetPushSubscriptionsOnChannelsRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set channel
         * @param channel Filter to restrict to subscriptions associated with that channel. (optional)
         * @return GetPushSubscriptionsOnChannelsRequestBuilder
         */
        public GetPushSubscriptionsOnChannelsRequestBuilder channel(String channel) {
            this.channel = channel;
            return this;
        }
        
        /**
         * Set deviceId
         * @param deviceId Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId. (optional)
         * @return GetPushSubscriptionsOnChannelsRequestBuilder
         */
        public GetPushSubscriptionsOnChannelsRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Set clientId
         * @param clientId Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId. (optional)
         * @return GetPushSubscriptionsOnChannelsRequestBuilder
         */
        public GetPushSubscriptionsOnChannelsRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of records to return. (optional, default to 100)
         * @return GetPushSubscriptionsOnChannelsRequestBuilder
         */
        public GetPushSubscriptionsOnChannelsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getPushSubscriptionsOnChannels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPushSubscriptionsOnChannelsCall(xAblyVersion, format, channel, deviceId, clientId, limit, _callback);
        }


        /**
         * Execute getPushSubscriptionsOnChannels request
         * @return DeviceDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public DeviceDetails execute() throws ApiException {
            ApiResponse<DeviceDetails> localVarResp = getPushSubscriptionsOnChannelsWithHttpInfo(xAblyVersion, format, channel, deviceId, clientId, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPushSubscriptionsOnChannels request with HTTP info returned
         * @return ApiResponse&lt;DeviceDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<DeviceDetails> executeWithHttpInfo() throws ApiException {
            return getPushSubscriptionsOnChannelsWithHttpInfo(xAblyVersion, format, channel, deviceId, clientId, limit);
        }

        /**
         * Execute getPushSubscriptionsOnChannels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceDetails> _callback) throws ApiException {
            return getPushSubscriptionsOnChannelsAsync(xAblyVersion, format, channel, deviceId, clientId, limit, _callback);
        }
    }

    /**
     * List channel subscriptions
     * Get a list of push notification subscriptions to channels.
     * @return GetPushSubscriptionsOnChannelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public GetPushSubscriptionsOnChannelsRequestBuilder getPushSubscriptionsOnChannels() throws IllegalArgumentException {
        return new GetPushSubscriptionsOnChannelsRequestBuilder();
    }
    private okhttp3.Call getRegisteredPushDevicesCall(String xAblyVersion, String format, String deviceId, String clientId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceId", deviceId));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegisteredPushDevicesValidateBeforeCall(String xAblyVersion, String format, String deviceId, String clientId, Integer limit, final ApiCallback _callback) throws ApiException {
        return getRegisteredPushDevicesCall(xAblyVersion, format, deviceId, clientId, limit, _callback);

    }


    private ApiResponse<DeviceDetails> getRegisteredPushDevicesWithHttpInfo(String xAblyVersion, String format, String deviceId, String clientId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getRegisteredPushDevicesValidateBeforeCall(xAblyVersion, format, deviceId, clientId, limit, null);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRegisteredPushDevicesAsync(String xAblyVersion, String format, String deviceId, String clientId, Integer limit, final ApiCallback<DeviceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegisteredPushDevicesValidateBeforeCall(xAblyVersion, format, deviceId, clientId, limit, _callback);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRegisteredPushDevicesRequestBuilder {
        private String xAblyVersion;
        private String format;
        private String deviceId;
        private String clientId;
        private Integer limit;

        private GetRegisteredPushDevicesRequestBuilder() {
        }

        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return GetRegisteredPushDevicesRequestBuilder
         */
        public GetRegisteredPushDevicesRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return GetRegisteredPushDevicesRequestBuilder
         */
        public GetRegisteredPushDevicesRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set deviceId
         * @param deviceId Optional filter to restrict to devices associated with that deviceId. (optional)
         * @return GetRegisteredPushDevicesRequestBuilder
         */
        public GetRegisteredPushDevicesRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Set clientId
         * @param clientId Optional filter to restrict to devices associated with that clientId. (optional)
         * @return GetRegisteredPushDevicesRequestBuilder
         */
        public GetRegisteredPushDevicesRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of records to return. (optional, default to 100)
         * @return GetRegisteredPushDevicesRequestBuilder
         */
        public GetRegisteredPushDevicesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getRegisteredPushDevices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRegisteredPushDevicesCall(xAblyVersion, format, deviceId, clientId, limit, _callback);
        }


        /**
         * Execute getRegisteredPushDevices request
         * @return DeviceDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public DeviceDetails execute() throws ApiException {
            ApiResponse<DeviceDetails> localVarResp = getRegisteredPushDevicesWithHttpInfo(xAblyVersion, format, deviceId, clientId, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRegisteredPushDevices request with HTTP info returned
         * @return ApiResponse&lt;DeviceDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<DeviceDetails> executeWithHttpInfo() throws ApiException {
            return getRegisteredPushDevicesWithHttpInfo(xAblyVersion, format, deviceId, clientId, limit);
        }

        /**
         * Execute getRegisteredPushDevices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceDetails> _callback) throws ApiException {
            return getRegisteredPushDevicesAsync(xAblyVersion, format, deviceId, clientId, limit, _callback);
        }
    }

    /**
     * List devices registered for receiving push notifications
     * List of device details of devices registed for push notifications.
     * @return GetRegisteredPushDevicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public GetRegisteredPushDevicesRequestBuilder getRegisteredPushDevices() throws IllegalArgumentException {
        return new GetRegisteredPushDevicesRequestBuilder();
    }
    private okhttp3.Call patchPushDeviceDetailsCall(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceDetails;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations/{device_id}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-msgpack",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPushDeviceDetailsValidateBeforeCall(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling patchPushDeviceDetails(Async)");
        }

        return patchPushDeviceDetailsCall(deviceId, xAblyVersion, format, deviceDetails, _callback);

    }


    private ApiResponse<DeviceDetails> patchPushDeviceDetailsWithHttpInfo(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails) throws ApiException {
        okhttp3.Call localVarCall = patchPushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, deviceDetails, null);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call patchPushDeviceDetailsAsync(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback<DeviceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, deviceDetails, _callback);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PatchPushDeviceDetailsRequestBuilder {
        private final String deviceId;
        private String clientId;
        private String deviceSecret;
        private String formFactor;
        private String id;
        private Object metadata;
        private String platform;
        private Recipient pushRecipient;
        private String pushState;
        private String xAblyVersion;
        private String format;

        private PatchPushDeviceDetailsRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Set clientId
         * @param clientId Optional trusted client identifier for the device. (optional)
         * @return PatchPushDeviceDetailsRequestBuilder
         */
        public PatchPushDeviceDetailsRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set deviceSecret
         * @param deviceSecret Secret value for the device. (optional)
         * @return PatchPushDeviceDetailsRequestBuilder
         */
        public PatchPushDeviceDetailsRequestBuilder deviceSecret(String deviceSecret) {
            this.deviceSecret = deviceSecret;
            return this;
        }
        
        /**
         * Set formFactor
         * @param formFactor Form factor of the push device. (optional)
         * @return PatchPushDeviceDetailsRequestBuilder
         */
        public PatchPushDeviceDetailsRequestBuilder formFactor(String formFactor) {
            this.formFactor = formFactor;
            return this;
        }
        
        /**
         * Set id
         * @param id Unique identifier for the device generated by the device itself. (optional)
         * @return PatchPushDeviceDetailsRequestBuilder
         */
        public PatchPushDeviceDetailsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications. (optional)
         * @return PatchPushDeviceDetailsRequestBuilder
         */
        public PatchPushDeviceDetailsRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set platform
         * @param platform Platform of the push device. (optional)
         * @return PatchPushDeviceDetailsRequestBuilder
         */
        public PatchPushDeviceDetailsRequestBuilder platform(String platform) {
            this.platform = platform;
            return this;
        }
        
        /**
         * Set pushRecipient
         * @param pushRecipient  (optional)
         * @return PatchPushDeviceDetailsRequestBuilder
         */
        public PatchPushDeviceDetailsRequestBuilder pushRecipient(Recipient pushRecipient) {
            this.pushRecipient = pushRecipient;
            return this;
        }
        
        /**
         * Set pushState
         * @param pushState the current state of the push device. (optional)
         * @return PatchPushDeviceDetailsRequestBuilder
         */
        public PatchPushDeviceDetailsRequestBuilder pushState(String pushState) {
            this.pushState = pushState;
            return this;
        }
        
        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return PatchPushDeviceDetailsRequestBuilder
         */
        public PatchPushDeviceDetailsRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return PatchPushDeviceDetailsRequestBuilder
         */
        public PatchPushDeviceDetailsRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for patchPushDeviceDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeviceDetails deviceDetails = buildBodyParams();
            return patchPushDeviceDetailsCall(deviceId, xAblyVersion, format, deviceDetails, _callback);
        }

        private DeviceDetails buildBodyParams() {
            DeviceDetails deviceDetails = new DeviceDetails();
            deviceDetails.clientId(this.clientId);
            deviceDetails.deviceSecret(this.deviceSecret);
            if (this.formFactor != null)
            deviceDetails.formFactor(DeviceDetails.FormFactorEnum.fromValue(this.formFactor));
            deviceDetails.id(this.id);
            deviceDetails.metadata(this.metadata);
            if (this.platform != null)
            deviceDetails.platform(DeviceDetails.PlatformEnum.fromValue(this.platform));
            deviceDetails.pushRecipient(this.pushRecipient);
            if (this.pushState != null)
            deviceDetails.pushState(DeviceDetails.PushStateEnum.fromValue(this.pushState));
            return deviceDetails;
        }

        /**
         * Execute patchPushDeviceDetails request
         * @return DeviceDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public DeviceDetails execute() throws ApiException {
            DeviceDetails deviceDetails = buildBodyParams();
            ApiResponse<DeviceDetails> localVarResp = patchPushDeviceDetailsWithHttpInfo(deviceId, xAblyVersion, format, deviceDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute patchPushDeviceDetails request with HTTP info returned
         * @return ApiResponse&lt;DeviceDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<DeviceDetails> executeWithHttpInfo() throws ApiException {
            DeviceDetails deviceDetails = buildBodyParams();
            return patchPushDeviceDetailsWithHttpInfo(deviceId, xAblyVersion, format, deviceDetails);
        }

        /**
         * Execute patchPushDeviceDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceDetails> _callback) throws ApiException {
            DeviceDetails deviceDetails = buildBodyParams();
            return patchPushDeviceDetailsAsync(deviceId, xAblyVersion, format, deviceDetails, _callback);
        }
    }

    /**
     * Update a device registration
     * Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
     * @param deviceId Device&#39;s ID. (required)
     * @return PatchPushDeviceDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public PatchPushDeviceDetailsRequestBuilder patchPushDeviceDetails(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new PatchPushDeviceDetailsRequestBuilder(deviceId);
    }
    private okhttp3.Call publishPushNotificationToDevicesCall(String xAblyVersion, String format, PublishPushNotificationToDevicesRequest publishPushNotificationToDevicesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publishPushNotificationToDevicesRequest;

        // create path and map variables
        String localVarPath = "/push/publish";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-msgpack",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishPushNotificationToDevicesValidateBeforeCall(String xAblyVersion, String format, PublishPushNotificationToDevicesRequest publishPushNotificationToDevicesRequest, final ApiCallback _callback) throws ApiException {
        return publishPushNotificationToDevicesCall(xAblyVersion, format, publishPushNotificationToDevicesRequest, _callback);

    }


    private ApiResponse<Void> publishPushNotificationToDevicesWithHttpInfo(String xAblyVersion, String format, PublishPushNotificationToDevicesRequest publishPushNotificationToDevicesRequest) throws ApiException {
        okhttp3.Call localVarCall = publishPushNotificationToDevicesValidateBeforeCall(xAblyVersion, format, publishPushNotificationToDevicesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call publishPushNotificationToDevicesAsync(String xAblyVersion, String format, PublishPushNotificationToDevicesRequest publishPushNotificationToDevicesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishPushNotificationToDevicesValidateBeforeCall(xAblyVersion, format, publishPushNotificationToDevicesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PublishPushNotificationToDevicesRequestBuilder {
        private final Recipient recipient;
        private Push push;
        private String xAblyVersion;
        private String format;

        private PublishPushNotificationToDevicesRequestBuilder(Recipient recipient) {
            this.recipient = recipient;
        }

        /**
         * Set push
         * @param push  (optional)
         * @return PublishPushNotificationToDevicesRequestBuilder
         */
        public PublishPushNotificationToDevicesRequestBuilder push(Push push) {
            this.push = push;
            return this;
        }
        
        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return PublishPushNotificationToDevicesRequestBuilder
         */
        public PublishPushNotificationToDevicesRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return PublishPushNotificationToDevicesRequestBuilder
         */
        public PublishPushNotificationToDevicesRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for publishPushNotificationToDevices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PublishPushNotificationToDevicesRequest publishPushNotificationToDevicesRequest = buildBodyParams();
            return publishPushNotificationToDevicesCall(xAblyVersion, format, publishPushNotificationToDevicesRequest, _callback);
        }

        private PublishPushNotificationToDevicesRequest buildBodyParams() {
            PublishPushNotificationToDevicesRequest publishPushNotificationToDevicesRequest = new PublishPushNotificationToDevicesRequest();
            publishPushNotificationToDevicesRequest.push(this.push);
            publishPushNotificationToDevicesRequest.recipient(this.recipient);
            return publishPushNotificationToDevicesRequest;
        }

        /**
         * Execute publishPushNotificationToDevices request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PublishPushNotificationToDevicesRequest publishPushNotificationToDevicesRequest = buildBodyParams();
            publishPushNotificationToDevicesWithHttpInfo(xAblyVersion, format, publishPushNotificationToDevicesRequest);
        }

        /**
         * Execute publishPushNotificationToDevices request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PublishPushNotificationToDevicesRequest publishPushNotificationToDevicesRequest = buildBodyParams();
            return publishPushNotificationToDevicesWithHttpInfo(xAblyVersion, format, publishPushNotificationToDevicesRequest);
        }

        /**
         * Execute publishPushNotificationToDevices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PublishPushNotificationToDevicesRequest publishPushNotificationToDevicesRequest = buildBodyParams();
            return publishPushNotificationToDevicesAsync(xAblyVersion, format, publishPushNotificationToDevicesRequest, _callback);
        }
    }

    /**
     * Publish a push notification to device(s)
     * A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
     * @return PublishPushNotificationToDevicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public PublishPushNotificationToDevicesRequestBuilder publishPushNotificationToDevices(Recipient recipient) throws IllegalArgumentException {
        if (recipient == null) throw new IllegalArgumentException("\"recipient\" is required but got null");
        return new PublishPushNotificationToDevicesRequestBuilder(recipient);
    }
    private okhttp3.Call putPushDeviceDetailsCall(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceDetails;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations/{device_id}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-msgpack",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPushDeviceDetailsValidateBeforeCall(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling putPushDeviceDetails(Async)");
        }

        return putPushDeviceDetailsCall(deviceId, xAblyVersion, format, deviceDetails, _callback);

    }


    private ApiResponse<DeviceDetails> putPushDeviceDetailsWithHttpInfo(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails) throws ApiException {
        okhttp3.Call localVarCall = putPushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, deviceDetails, null);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putPushDeviceDetailsAsync(String deviceId, String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback<DeviceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, deviceDetails, _callback);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PutPushDeviceDetailsRequestBuilder {
        private final String deviceId;
        private String clientId;
        private String deviceSecret;
        private String formFactor;
        private String id;
        private Object metadata;
        private String platform;
        private Recipient pushRecipient;
        private String pushState;
        private String xAblyVersion;
        private String format;

        private PutPushDeviceDetailsRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Set clientId
         * @param clientId Optional trusted client identifier for the device. (optional)
         * @return PutPushDeviceDetailsRequestBuilder
         */
        public PutPushDeviceDetailsRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set deviceSecret
         * @param deviceSecret Secret value for the device. (optional)
         * @return PutPushDeviceDetailsRequestBuilder
         */
        public PutPushDeviceDetailsRequestBuilder deviceSecret(String deviceSecret) {
            this.deviceSecret = deviceSecret;
            return this;
        }
        
        /**
         * Set formFactor
         * @param formFactor Form factor of the push device. (optional)
         * @return PutPushDeviceDetailsRequestBuilder
         */
        public PutPushDeviceDetailsRequestBuilder formFactor(String formFactor) {
            this.formFactor = formFactor;
            return this;
        }
        
        /**
         * Set id
         * @param id Unique identifier for the device generated by the device itself. (optional)
         * @return PutPushDeviceDetailsRequestBuilder
         */
        public PutPushDeviceDetailsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications. (optional)
         * @return PutPushDeviceDetailsRequestBuilder
         */
        public PutPushDeviceDetailsRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set platform
         * @param platform Platform of the push device. (optional)
         * @return PutPushDeviceDetailsRequestBuilder
         */
        public PutPushDeviceDetailsRequestBuilder platform(String platform) {
            this.platform = platform;
            return this;
        }
        
        /**
         * Set pushRecipient
         * @param pushRecipient  (optional)
         * @return PutPushDeviceDetailsRequestBuilder
         */
        public PutPushDeviceDetailsRequestBuilder pushRecipient(Recipient pushRecipient) {
            this.pushRecipient = pushRecipient;
            return this;
        }
        
        /**
         * Set pushState
         * @param pushState the current state of the push device. (optional)
         * @return PutPushDeviceDetailsRequestBuilder
         */
        public PutPushDeviceDetailsRequestBuilder pushState(String pushState) {
            this.pushState = pushState;
            return this;
        }
        
        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return PutPushDeviceDetailsRequestBuilder
         */
        public PutPushDeviceDetailsRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return PutPushDeviceDetailsRequestBuilder
         */
        public PutPushDeviceDetailsRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for putPushDeviceDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeviceDetails deviceDetails = buildBodyParams();
            return putPushDeviceDetailsCall(deviceId, xAblyVersion, format, deviceDetails, _callback);
        }

        private DeviceDetails buildBodyParams() {
            DeviceDetails deviceDetails = new DeviceDetails();
            deviceDetails.clientId(this.clientId);
            deviceDetails.deviceSecret(this.deviceSecret);
            if (this.formFactor != null)
            deviceDetails.formFactor(DeviceDetails.FormFactorEnum.fromValue(this.formFactor));
            deviceDetails.id(this.id);
            deviceDetails.metadata(this.metadata);
            if (this.platform != null)
            deviceDetails.platform(DeviceDetails.PlatformEnum.fromValue(this.platform));
            deviceDetails.pushRecipient(this.pushRecipient);
            if (this.pushState != null)
            deviceDetails.pushState(DeviceDetails.PushStateEnum.fromValue(this.pushState));
            return deviceDetails;
        }

        /**
         * Execute putPushDeviceDetails request
         * @return DeviceDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public DeviceDetails execute() throws ApiException {
            DeviceDetails deviceDetails = buildBodyParams();
            ApiResponse<DeviceDetails> localVarResp = putPushDeviceDetailsWithHttpInfo(deviceId, xAblyVersion, format, deviceDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute putPushDeviceDetails request with HTTP info returned
         * @return ApiResponse&lt;DeviceDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<DeviceDetails> executeWithHttpInfo() throws ApiException {
            DeviceDetails deviceDetails = buildBodyParams();
            return putPushDeviceDetailsWithHttpInfo(deviceId, xAblyVersion, format, deviceDetails);
        }

        /**
         * Execute putPushDeviceDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceDetails> _callback) throws ApiException {
            DeviceDetails deviceDetails = buildBodyParams();
            return putPushDeviceDetailsAsync(deviceId, xAblyVersion, format, deviceDetails, _callback);
        }
    }

    /**
     * Update a device registration
     * Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
     * @param deviceId Device&#39;s ID. (required)
     * @return PutPushDeviceDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public PutPushDeviceDetailsRequestBuilder putPushDeviceDetails(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new PutPushDeviceDetailsRequestBuilder(deviceId);
    }
    private okhttp3.Call registerPushDeviceCall(String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceDetails;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-msgpack"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerPushDeviceValidateBeforeCall(String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback _callback) throws ApiException {
        return registerPushDeviceCall(xAblyVersion, format, deviceDetails, _callback);

    }


    private ApiResponse<DeviceDetails> registerPushDeviceWithHttpInfo(String xAblyVersion, String format, DeviceDetails deviceDetails) throws ApiException {
        okhttp3.Call localVarCall = registerPushDeviceValidateBeforeCall(xAblyVersion, format, deviceDetails, null);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call registerPushDeviceAsync(String xAblyVersion, String format, DeviceDetails deviceDetails, final ApiCallback<DeviceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerPushDeviceValidateBeforeCall(xAblyVersion, format, deviceDetails, _callback);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RegisterPushDeviceRequestBuilder {
        private String clientId;
        private String deviceSecret;
        private String formFactor;
        private String id;
        private Object metadata;
        private String platform;
        private Recipient pushRecipient;
        private String pushState;
        private String xAblyVersion;
        private String format;

        private RegisterPushDeviceRequestBuilder() {
        }

        /**
         * Set clientId
         * @param clientId Optional trusted client identifier for the device. (optional)
         * @return RegisterPushDeviceRequestBuilder
         */
        public RegisterPushDeviceRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set deviceSecret
         * @param deviceSecret Secret value for the device. (optional)
         * @return RegisterPushDeviceRequestBuilder
         */
        public RegisterPushDeviceRequestBuilder deviceSecret(String deviceSecret) {
            this.deviceSecret = deviceSecret;
            return this;
        }
        
        /**
         * Set formFactor
         * @param formFactor Form factor of the push device. (optional)
         * @return RegisterPushDeviceRequestBuilder
         */
        public RegisterPushDeviceRequestBuilder formFactor(String formFactor) {
            this.formFactor = formFactor;
            return this;
        }
        
        /**
         * Set id
         * @param id Unique identifier for the device generated by the device itself. (optional)
         * @return RegisterPushDeviceRequestBuilder
         */
        public RegisterPushDeviceRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications. (optional)
         * @return RegisterPushDeviceRequestBuilder
         */
        public RegisterPushDeviceRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set platform
         * @param platform Platform of the push device. (optional)
         * @return RegisterPushDeviceRequestBuilder
         */
        public RegisterPushDeviceRequestBuilder platform(String platform) {
            this.platform = platform;
            return this;
        }
        
        /**
         * Set pushRecipient
         * @param pushRecipient  (optional)
         * @return RegisterPushDeviceRequestBuilder
         */
        public RegisterPushDeviceRequestBuilder pushRecipient(Recipient pushRecipient) {
            this.pushRecipient = pushRecipient;
            return this;
        }
        
        /**
         * Set pushState
         * @param pushState the current state of the push device. (optional)
         * @return RegisterPushDeviceRequestBuilder
         */
        public RegisterPushDeviceRequestBuilder pushState(String pushState) {
            this.pushState = pushState;
            return this;
        }
        
        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return RegisterPushDeviceRequestBuilder
         */
        public RegisterPushDeviceRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return RegisterPushDeviceRequestBuilder
         */
        public RegisterPushDeviceRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for registerPushDevice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeviceDetails deviceDetails = buildBodyParams();
            return registerPushDeviceCall(xAblyVersion, format, deviceDetails, _callback);
        }

        private DeviceDetails buildBodyParams() {
            DeviceDetails deviceDetails = new DeviceDetails();
            deviceDetails.clientId(this.clientId);
            deviceDetails.deviceSecret(this.deviceSecret);
            if (this.formFactor != null)
            deviceDetails.formFactor(DeviceDetails.FormFactorEnum.fromValue(this.formFactor));
            deviceDetails.id(this.id);
            deviceDetails.metadata(this.metadata);
            if (this.platform != null)
            deviceDetails.platform(DeviceDetails.PlatformEnum.fromValue(this.platform));
            deviceDetails.pushRecipient(this.pushRecipient);
            if (this.pushState != null)
            deviceDetails.pushState(DeviceDetails.PushStateEnum.fromValue(this.pushState));
            return deviceDetails;
        }

        /**
         * Execute registerPushDevice request
         * @return DeviceDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public DeviceDetails execute() throws ApiException {
            DeviceDetails deviceDetails = buildBodyParams();
            ApiResponse<DeviceDetails> localVarResp = registerPushDeviceWithHttpInfo(xAblyVersion, format, deviceDetails);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute registerPushDevice request with HTTP info returned
         * @return ApiResponse&lt;DeviceDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<DeviceDetails> executeWithHttpInfo() throws ApiException {
            DeviceDetails deviceDetails = buildBodyParams();
            return registerPushDeviceWithHttpInfo(xAblyVersion, format, deviceDetails);
        }

        /**
         * Execute registerPushDevice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceDetails> _callback) throws ApiException {
            DeviceDetails deviceDetails = buildBodyParams();
            return registerPushDeviceAsync(xAblyVersion, format, deviceDetails, _callback);
        }
    }

    /**
     * Register a device for receiving push notifications
     * Register a device’s details, including the information necessary to deliver push notifications to it. Requires \&quot;push-admin\&quot; capability.
     * @return RegisterPushDeviceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public RegisterPushDeviceRequestBuilder registerPushDevice() throws IllegalArgumentException {
        return new RegisterPushDeviceRequestBuilder();
    }
    private okhttp3.Call subscribePushDeviceToChannelCall(String xAblyVersion, String format, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/push/channelSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-msgpack",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscribePushDeviceToChannelValidateBeforeCall(String xAblyVersion, String format, Object body, final ApiCallback _callback) throws ApiException {
        return subscribePushDeviceToChannelCall(xAblyVersion, format, body, _callback);

    }


    private ApiResponse<Void> subscribePushDeviceToChannelWithHttpInfo(String xAblyVersion, String format, Object body) throws ApiException {
        okhttp3.Call localVarCall = subscribePushDeviceToChannelValidateBeforeCall(xAblyVersion, format, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call subscribePushDeviceToChannelAsync(String xAblyVersion, String format, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscribePushDeviceToChannelValidateBeforeCall(xAblyVersion, format, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SubscribePushDeviceToChannelRequestBuilder {
        private String xAblyVersion;
        private String format;
        private Object body;

        private SubscribePushDeviceToChannelRequestBuilder() {
        }

        /**
         * Set body
         * @param body  (optional)
         * @return SubscribePushDeviceToChannelRequestBuilder
         */
        public SubscribePushDeviceToChannelRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return SubscribePushDeviceToChannelRequestBuilder
         */
        public SubscribePushDeviceToChannelRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return SubscribePushDeviceToChannelRequestBuilder
         */
        public SubscribePushDeviceToChannelRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for subscribePushDeviceToChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return subscribePushDeviceToChannelCall(xAblyVersion, format, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute subscribePushDeviceToChannel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Object body = buildBodyParams();
            subscribePushDeviceToChannelWithHttpInfo(xAblyVersion, format, body);
        }

        /**
         * Execute subscribePushDeviceToChannel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return subscribePushDeviceToChannelWithHttpInfo(xAblyVersion, format, body);
        }

        /**
         * Execute subscribePushDeviceToChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Object body = buildBodyParams();
            return subscribePushDeviceToChannelAsync(xAblyVersion, format, body, _callback);
        }
    }

    /**
     * Subscribe a device to a channel
     * Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
     * @return SubscribePushDeviceToChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public SubscribePushDeviceToChannelRequestBuilder subscribePushDeviceToChannel() throws IllegalArgumentException {
        return new SubscribePushDeviceToChannelRequestBuilder();
    }
    private okhttp3.Call unregisterAllPushDevicesCall(String xAblyVersion, String format, String deviceId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deviceId", deviceId));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unregisterAllPushDevicesValidateBeforeCall(String xAblyVersion, String format, String deviceId, String clientId, final ApiCallback _callback) throws ApiException {
        return unregisterAllPushDevicesCall(xAblyVersion, format, deviceId, clientId, _callback);

    }


    private ApiResponse<Void> unregisterAllPushDevicesWithHttpInfo(String xAblyVersion, String format, String deviceId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = unregisterAllPushDevicesValidateBeforeCall(xAblyVersion, format, deviceId, clientId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unregisterAllPushDevicesAsync(String xAblyVersion, String format, String deviceId, String clientId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unregisterAllPushDevicesValidateBeforeCall(xAblyVersion, format, deviceId, clientId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnregisterAllPushDevicesRequestBuilder {
        private String xAblyVersion;
        private String format;
        private String deviceId;
        private String clientId;

        private UnregisterAllPushDevicesRequestBuilder() {
        }

        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return UnregisterAllPushDevicesRequestBuilder
         */
        public UnregisterAllPushDevicesRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return UnregisterAllPushDevicesRequestBuilder
         */
        public UnregisterAllPushDevicesRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set deviceId
         * @param deviceId Optional filter to restrict to devices associated with that deviceId. Cannot be used with clientId. (optional)
         * @return UnregisterAllPushDevicesRequestBuilder
         */
        public UnregisterAllPushDevicesRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Set clientId
         * @param clientId Optional filter to restrict to devices associated with that clientId. Cannot be used with deviceId. (optional)
         * @return UnregisterAllPushDevicesRequestBuilder
         */
        public UnregisterAllPushDevicesRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Build call for unregisterAllPushDevices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unregisterAllPushDevicesCall(xAblyVersion, format, deviceId, clientId, _callback);
        }


        /**
         * Execute unregisterAllPushDevices request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unregisterAllPushDevicesWithHttpInfo(xAblyVersion, format, deviceId, clientId);
        }

        /**
         * Execute unregisterAllPushDevices request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unregisterAllPushDevicesWithHttpInfo(xAblyVersion, format, deviceId, clientId);
        }

        /**
         * Execute unregisterAllPushDevices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unregisterAllPushDevicesAsync(xAblyVersion, format, deviceId, clientId, _callback);
        }
    }

    /**
     * Unregister matching devices for push notifications
     * Unregisters devices. All their subscriptions for receiving push notifications through channels will also be deleted.
     * @return UnregisterAllPushDevicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public UnregisterAllPushDevicesRequestBuilder unregisterAllPushDevices() throws IllegalArgumentException {
        return new UnregisterAllPushDevicesRequestBuilder();
    }
    private okhttp3.Call unregisterPushDeviceCall(String deviceId, String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations/{device_id}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unregisterPushDeviceValidateBeforeCall(String deviceId, String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling unregisterPushDevice(Async)");
        }

        return unregisterPushDeviceCall(deviceId, xAblyVersion, format, _callback);

    }


    private ApiResponse<Void> unregisterPushDeviceWithHttpInfo(String deviceId, String xAblyVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = unregisterPushDeviceValidateBeforeCall(deviceId, xAblyVersion, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unregisterPushDeviceAsync(String deviceId, String xAblyVersion, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unregisterPushDeviceValidateBeforeCall(deviceId, xAblyVersion, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UnregisterPushDeviceRequestBuilder {
        private final String deviceId;
        private String xAblyVersion;
        private String format;

        private UnregisterPushDeviceRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return UnregisterPushDeviceRequestBuilder
         */
        public UnregisterPushDeviceRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return UnregisterPushDeviceRequestBuilder
         */
        public UnregisterPushDeviceRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for unregisterPushDevice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unregisterPushDeviceCall(deviceId, xAblyVersion, format, _callback);
        }


        /**
         * Execute unregisterPushDevice request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unregisterPushDeviceWithHttpInfo(deviceId, xAblyVersion, format);
        }

        /**
         * Execute unregisterPushDevice request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unregisterPushDeviceWithHttpInfo(deviceId, xAblyVersion, format);
        }

        /**
         * Execute unregisterPushDevice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unregisterPushDeviceAsync(deviceId, xAblyVersion, format, _callback);
        }
    }

    /**
     * Unregister a single device for push notifications
     * Unregisters a single device by its device ID. All its subscriptions for receiving push notifications through channels will also be deleted.
     * @param deviceId Device&#39;s ID. (required)
     * @return UnregisterPushDeviceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public UnregisterPushDeviceRequestBuilder unregisterPushDevice(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new UnregisterPushDeviceRequestBuilder(deviceId);
    }
    private okhttp3.Call updatePushDeviceDetailsCall(String deviceId, String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/push/deviceRegistrations/{device_id}/resetUpdateToken"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePushDeviceDetailsValidateBeforeCall(String deviceId, String xAblyVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling updatePushDeviceDetails(Async)");
        }

        return updatePushDeviceDetailsCall(deviceId, xAblyVersion, format, _callback);

    }


    private ApiResponse<DeviceDetails> updatePushDeviceDetailsWithHttpInfo(String deviceId, String xAblyVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = updatePushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, null);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePushDeviceDetailsAsync(String deviceId, String xAblyVersion, String format, final ApiCallback<DeviceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePushDeviceDetailsValidateBeforeCall(deviceId, xAblyVersion, format, _callback);
        Type localVarReturnType = new TypeToken<DeviceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePushDeviceDetailsRequestBuilder {
        private final String deviceId;
        private String xAblyVersion;
        private String format;

        private UpdatePushDeviceDetailsRequestBuilder(String deviceId) {
            this.deviceId = deviceId;
        }

        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return UpdatePushDeviceDetailsRequestBuilder
         */
        public UpdatePushDeviceDetailsRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return UpdatePushDeviceDetailsRequestBuilder
         */
        public UpdatePushDeviceDetailsRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for updatePushDeviceDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updatePushDeviceDetailsCall(deviceId, xAblyVersion, format, _callback);
        }


        /**
         * Execute updatePushDeviceDetails request
         * @return DeviceDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public DeviceDetails execute() throws ApiException {
            ApiResponse<DeviceDetails> localVarResp = updatePushDeviceDetailsWithHttpInfo(deviceId, xAblyVersion, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePushDeviceDetails request with HTTP info returned
         * @return ApiResponse&lt;DeviceDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<DeviceDetails> executeWithHttpInfo() throws ApiException {
            return updatePushDeviceDetailsWithHttpInfo(deviceId, xAblyVersion, format);
        }

        /**
         * Execute updatePushDeviceDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeviceDetails> _callback) throws ApiException {
            return updatePushDeviceDetailsAsync(deviceId, xAblyVersion, format, _callback);
        }
    }

    /**
     * Reset a registered device&#39;s update token
     * Gets an updated device details object.
     * @param deviceId Device&#39;s ID. (required)
     * @return UpdatePushDeviceDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public UpdatePushDeviceDetailsRequestBuilder updatePushDeviceDetails(String deviceId) throws IllegalArgumentException {
        if (deviceId == null) throw new IllegalArgumentException("\"deviceId\" is required but got null");
            

        return new UpdatePushDeviceDetailsRequestBuilder(deviceId);
    }
}
