/*
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class HistoryApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HistoryApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public HistoryApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getMessagesByChannelCall(String channelId, String xAblyVersion, String format, String start, Integer limit, String end, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/messages"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessagesByChannelValidateBeforeCall(String channelId, String xAblyVersion, String format, String start, Integer limit, String end, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getMessagesByChannel(Async)");
        }

        return getMessagesByChannelCall(channelId, xAblyVersion, format, start, limit, end, direction, _callback);

    }


    private ApiResponse<List<Message>> getMessagesByChannelWithHttpInfo(String channelId, String xAblyVersion, String format, String start, Integer limit, String end, String direction) throws ApiException {
        okhttp3.Call localVarCall = getMessagesByChannelValidateBeforeCall(channelId, xAblyVersion, format, start, limit, end, direction, null);
        Type localVarReturnType = new TypeToken<List<Message>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMessagesByChannelAsync(String channelId, String xAblyVersion, String format, String start, Integer limit, String end, String direction, final ApiCallback<List<Message>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessagesByChannelValidateBeforeCall(channelId, xAblyVersion, format, start, limit, end, direction, _callback);
        Type localVarReturnType = new TypeToken<List<Message>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMessagesByChannelRequestBuilder {
        private final String channelId;
        private String xAblyVersion;
        private String format;
        private String start;
        private Integer limit;
        private String end;
        private String direction;

        private GetMessagesByChannelRequestBuilder(String channelId) {
            this.channelId = channelId;
        }

        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return GetMessagesByChannelRequestBuilder
         */
        public GetMessagesByChannelRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return GetMessagesByChannelRequestBuilder
         */
        public GetMessagesByChannelRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set start
         * @param start  (optional)
         * @return GetMessagesByChannelRequestBuilder
         */
        public GetMessagesByChannelRequestBuilder start(String start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return GetMessagesByChannelRequestBuilder
         */
        public GetMessagesByChannelRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set end
         * @param end  (optional, default to now)
         * @return GetMessagesByChannelRequestBuilder
         */
        public GetMessagesByChannelRequestBuilder end(String end) {
            this.end = end;
            return this;
        }
        
        /**
         * Set direction
         * @param direction  (optional, default to backwards)
         * @return GetMessagesByChannelRequestBuilder
         */
        public GetMessagesByChannelRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Build call for getMessagesByChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMessagesByChannelCall(channelId, xAblyVersion, format, start, limit, end, direction, _callback);
        }


        /**
         * Execute getMessagesByChannel request
         * @return List&lt;Message&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public List<Message> execute() throws ApiException {
            ApiResponse<List<Message>> localVarResp = getMessagesByChannelWithHttpInfo(channelId, xAblyVersion, format, start, limit, end, direction);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMessagesByChannel request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Message&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<List<Message>> executeWithHttpInfo() throws ApiException {
            return getMessagesByChannelWithHttpInfo(channelId, xAblyVersion, format, start, limit, end, direction);
        }

        /**
         * Execute getMessagesByChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Message>> _callback) throws ApiException {
            return getMessagesByChannelAsync(channelId, xAblyVersion, format, start, limit, end, direction, _callback);
        }
    }

    /**
     * Get message history for a channel
     * Get message history for a channel
     * @param channelId The [Channel&#39;s ID](https://www.ably.io/documentation/rest/channels). (required)
     * @return GetMessagesByChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public GetMessagesByChannelRequestBuilder getMessagesByChannel(String channelId) throws IllegalArgumentException {
        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new GetMessagesByChannelRequestBuilder(channelId);
    }
    private okhttp3.Call getPresenceHistoryOfChannelCall(String channelId, String xAblyVersion, String format, String start, Integer limit, String end, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/presence/history"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (xAblyVersion != null) {
            localVarHeaderParams.put("X-Ably-Version", localVarApiClient.parameterToString(xAblyVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-msgpack",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPresenceHistoryOfChannelValidateBeforeCall(String channelId, String xAblyVersion, String format, String start, Integer limit, String end, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getPresenceHistoryOfChannel(Async)");
        }

        return getPresenceHistoryOfChannelCall(channelId, xAblyVersion, format, start, limit, end, direction, _callback);

    }


    private ApiResponse<List<PresenceMessage>> getPresenceHistoryOfChannelWithHttpInfo(String channelId, String xAblyVersion, String format, String start, Integer limit, String end, String direction) throws ApiException {
        okhttp3.Call localVarCall = getPresenceHistoryOfChannelValidateBeforeCall(channelId, xAblyVersion, format, start, limit, end, direction, null);
        Type localVarReturnType = new TypeToken<List<PresenceMessage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPresenceHistoryOfChannelAsync(String channelId, String xAblyVersion, String format, String start, Integer limit, String end, String direction, final ApiCallback<List<PresenceMessage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPresenceHistoryOfChannelValidateBeforeCall(channelId, xAblyVersion, format, start, limit, end, direction, _callback);
        Type localVarReturnType = new TypeToken<List<PresenceMessage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPresenceHistoryOfChannelRequestBuilder {
        private final String channelId;
        private String xAblyVersion;
        private String format;
        private String start;
        private Integer limit;
        private String end;
        private String direction;

        private GetPresenceHistoryOfChannelRequestBuilder(String channelId) {
            this.channelId = channelId;
        }

        /**
         * Set xAblyVersion
         * @param xAblyVersion The version of the API you wish to use. (optional)
         * @return GetPresenceHistoryOfChannelRequestBuilder
         */
        public GetPresenceHistoryOfChannelRequestBuilder xAblyVersion(String xAblyVersion) {
            this.xAblyVersion = xAblyVersion;
            return this;
        }
        
        /**
         * Set format
         * @param format The response format you would like (optional)
         * @return GetPresenceHistoryOfChannelRequestBuilder
         */
        public GetPresenceHistoryOfChannelRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set start
         * @param start  (optional)
         * @return GetPresenceHistoryOfChannelRequestBuilder
         */
        public GetPresenceHistoryOfChannelRequestBuilder start(String start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return GetPresenceHistoryOfChannelRequestBuilder
         */
        public GetPresenceHistoryOfChannelRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set end
         * @param end  (optional, default to now)
         * @return GetPresenceHistoryOfChannelRequestBuilder
         */
        public GetPresenceHistoryOfChannelRequestBuilder end(String end) {
            this.end = end;
            return this;
        }
        
        /**
         * Set direction
         * @param direction  (optional, default to backwards)
         * @return GetPresenceHistoryOfChannelRequestBuilder
         */
        public GetPresenceHistoryOfChannelRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Build call for getPresenceHistoryOfChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPresenceHistoryOfChannelCall(channelId, xAblyVersion, format, start, limit, end, direction, _callback);
        }


        /**
         * Execute getPresenceHistoryOfChannel request
         * @return List&lt;PresenceMessage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public List<PresenceMessage> execute() throws ApiException {
            ApiResponse<List<PresenceMessage>> localVarResp = getPresenceHistoryOfChannelWithHttpInfo(channelId, xAblyVersion, format, start, limit, end, direction);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPresenceHistoryOfChannel request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PresenceMessage&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<List<PresenceMessage>> executeWithHttpInfo() throws ApiException {
            return getPresenceHistoryOfChannelWithHttpInfo(channelId, xAblyVersion, format, start, limit, end, direction);
        }

        /**
         * Execute getPresenceHistoryOfChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PresenceMessage>> _callback) throws ApiException {
            return getPresenceHistoryOfChannelAsync(channelId, xAblyVersion, format, start, limit, end, direction, _callback);
        }
    }

    /**
     * Get presence history of a channel
     * Get presence on a channel
     * @param channelId The [Channel&#39;s ID](https://www.ably.io/documentation/rest/channels). (required)
     * @return GetPresenceHistoryOfChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  * x-ably-errorcode -  <br>  * x-ably-errormessage -  <br>  * x-ably-serverid -  <br>  </td></tr>
     </table>
     */
    public GetPresenceHistoryOfChannelRequestBuilder getPresenceHistoryOfChannel(String channelId) throws IllegalArgumentException {
        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new GetPresenceHistoryOfChannelRequestBuilder(channelId);
    }
}
