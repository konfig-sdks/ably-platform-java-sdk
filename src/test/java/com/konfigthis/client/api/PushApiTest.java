/*
 * Platform API
 * The [REST API specification](https://www.ably.io/documentation/rest-api) for Ably.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@ably.io
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.DeviceDetails;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.PublishPushNotificationToDevicesRequest;
import com.konfigthis.client.model.Push;
import com.konfigthis.client.model.Recipient;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PushApi
 */
@Disabled
public class PushApiTest {

    private static PushApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PushApi(apiClient);
    }

    /**
     * Delete a registered device&#39;s update token
     *
     * Delete a device details object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePushDeviceDetailsTest() throws ApiException {
        String xAblyVersion = null;
        String format = null;
        String channel = null;
        String deviceId = null;
        String clientId = null;
        api.deletePushDeviceDetails()
                .xAblyVersion(xAblyVersion)
                .format(format)
                .channel(channel)
                .deviceId(deviceId)
                .clientId(clientId)
                .execute();
        // TODO: test validations
    }

    /**
     * List all channels with at least one subscribed device
     *
     * Returns a paginated response of channel names.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelsWithPushSubscribersTest() throws ApiException {
        String xAblyVersion = null;
        String format = null;
        List<String> response = api.getChannelsWithPushSubscribers()
                .xAblyVersion(xAblyVersion)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a device registration
     *
     * Get the full details of a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPushDeviceDetailsTest() throws ApiException {
        String deviceId = null;
        String xAblyVersion = null;
        String format = null;
        DeviceDetails response = api.getPushDeviceDetails(deviceId)
                .xAblyVersion(xAblyVersion)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * List channel subscriptions
     *
     * Get a list of push notification subscriptions to channels.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPushSubscriptionsOnChannelsTest() throws ApiException {
        String xAblyVersion = null;
        String format = null;
        String channel = null;
        String deviceId = null;
        String clientId = null;
        Integer limit = null;
        DeviceDetails response = api.getPushSubscriptionsOnChannels()
                .xAblyVersion(xAblyVersion)
                .format(format)
                .channel(channel)
                .deviceId(deviceId)
                .clientId(clientId)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * List devices registered for receiving push notifications
     *
     * List of device details of devices registed for push notifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRegisteredPushDevicesTest() throws ApiException {
        String xAblyVersion = null;
        String format = null;
        String deviceId = null;
        String clientId = null;
        Integer limit = null;
        DeviceDetails response = api.getRegisteredPushDevices()
                .xAblyVersion(xAblyVersion)
                .format(format)
                .deviceId(deviceId)
                .clientId(clientId)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a device registration
     *
     * Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchPushDeviceDetailsTest() throws ApiException {
        String deviceId = null;
        String clientId = null;
        String deviceSecret = null;
        String formFactor = null;
        String id = null;
        Object metadata = null;
        String platform = null;
        Recipient pushRecipient = null;
        String pushState = null;
        String xAblyVersion = null;
        String format = null;
        DeviceDetails response = api.patchPushDeviceDetails(deviceId)
                .clientId(clientId)
                .deviceSecret(deviceSecret)
                .formFactor(formFactor)
                .id(id)
                .metadata(metadata)
                .platform(platform)
                .pushRecipient(pushRecipient)
                .pushState(pushState)
                .xAblyVersion(xAblyVersion)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Publish a push notification to device(s)
     *
     * A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishPushNotificationToDevicesTest() throws ApiException {
        Recipient recipient = null;
        Push push = null;
        String xAblyVersion = null;
        String format = null;
        api.publishPushNotificationToDevices(recipient)
                .push(push)
                .xAblyVersion(xAblyVersion)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a device registration
     *
     * Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPushDeviceDetailsTest() throws ApiException {
        String deviceId = null;
        String clientId = null;
        String deviceSecret = null;
        String formFactor = null;
        String id = null;
        Object metadata = null;
        String platform = null;
        Recipient pushRecipient = null;
        String pushState = null;
        String xAblyVersion = null;
        String format = null;
        DeviceDetails response = api.putPushDeviceDetails(deviceId)
                .clientId(clientId)
                .deviceSecret(deviceSecret)
                .formFactor(formFactor)
                .id(id)
                .metadata(metadata)
                .platform(platform)
                .pushRecipient(pushRecipient)
                .pushState(pushState)
                .xAblyVersion(xAblyVersion)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Register a device for receiving push notifications
     *
     * Register a deviceâ€™s details, including the information necessary to deliver push notifications to it. Requires \&quot;push-admin\&quot; capability.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerPushDeviceTest() throws ApiException {
        String clientId = null;
        String deviceSecret = null;
        String formFactor = null;
        String id = null;
        Object metadata = null;
        String platform = null;
        Recipient pushRecipient = null;
        String pushState = null;
        String xAblyVersion = null;
        String format = null;
        DeviceDetails response = api.registerPushDevice()
                .clientId(clientId)
                .deviceSecret(deviceSecret)
                .formFactor(formFactor)
                .id(id)
                .metadata(metadata)
                .platform(platform)
                .pushRecipient(pushRecipient)
                .pushState(pushState)
                .xAblyVersion(xAblyVersion)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Subscribe a device to a channel
     *
     * Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribePushDeviceToChannelTest() throws ApiException {
        String xAblyVersion = null;
        String format = null;
        api.subscribePushDeviceToChannel()
                .xAblyVersion(xAblyVersion)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Unregister matching devices for push notifications
     *
     * Unregisters devices. All their subscriptions for receiving push notifications through channels will also be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unregisterAllPushDevicesTest() throws ApiException {
        String xAblyVersion = null;
        String format = null;
        String deviceId = null;
        String clientId = null;
        api.unregisterAllPushDevices()
                .xAblyVersion(xAblyVersion)
                .format(format)
                .deviceId(deviceId)
                .clientId(clientId)
                .execute();
        // TODO: test validations
    }

    /**
     * Unregister a single device for push notifications
     *
     * Unregisters a single device by its device ID. All its subscriptions for receiving push notifications through channels will also be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unregisterPushDeviceTest() throws ApiException {
        String deviceId = null;
        String xAblyVersion = null;
        String format = null;
        api.unregisterPushDevice(deviceId)
                .xAblyVersion(xAblyVersion)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Reset a registered device&#39;s update token
     *
     * Gets an updated device details object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePushDeviceDetailsTest() throws ApiException {
        String deviceId = null;
        String xAblyVersion = null;
        String format = null;
        DeviceDetails response = api.updatePushDeviceDetails(deviceId)
                .xAblyVersion(xAblyVersion)
                .format(format)
                .execute();
        // TODO: test validations
    }

}
